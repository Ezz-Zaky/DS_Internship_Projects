# -*- coding: utf-8 -*-
"""classification_model_evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16-U0NmybOMnjWLd44kIZif4pHhWa0rv9

#Classification Model Evaluation

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, accuracy_score
"""## Importing the dataset"""

dataset = pd.read_csv('Healthcare_processed_dataset.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

"""## Splitting the dataset into the Training set and Test set"""


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

"""## Feature Scaling"""

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""

```

```

## Training the Classification models on the Training set"""
class_RandomForest = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
class_DecisionTree = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
class_KNeighbors=KNeighborsClassifier()
class_KSVM=SVC(kernel='rbf', random_state = 0)
class_SVM=SVC(kernel='linear', random_state = 0)
class_NB=GaussianNB()
class_LR=LogisticRegression(random_state = 0)

class_RandomForest.fit(X_train, y_train)
class_DecisionTree.fit(X_train, y_train)
class_KNeighbors.fit(X_train, y_train)
class_KSVM.fit(X_train, y_train)
class_SVM.fit(X_train, y_train)
class_NB.fit(X_train, y_train)
class_LR.fit(X_train, y_train)

"""## Creating the Confusion Matrices"""

y_pred_RandomForest = class_RandomForest.predict(X_test)
y_pred_DecisionTree = class_DecisionTree.predict(X_test)
y_pred_KNeighbors = class_KNeighbors.predict(X_test)
y_pred_KSVM = class_KSVM.predict(X_test)
y_pred_SVM = class_SVM.predict(X_test)
y_pred_NB = class_NB.predict(X_test)
y_pred_LR = class_LR.predict(X_test)

cm_RandomForest = confusion_matrix(y_test, y_pred_RandomForest)
cm_DecisionTree = confusion_matrix(y_test, y_pred_DecisionTree)
cm_KNeighbors = confusion_matrix(y_test, y_pred_KNeighbors)
cm_KSVM = confusion_matrix(y_test, y_pred_KSVM)
cm_SVM = confusion_matrix(y_test, y_pred_SVM)
cm_NB = confusion_matrix(y_test, y_pred_NB)
cm_LR = confusion_matrix(y_test, y_pred_LR)

print(cm_RandomForest)
print(accuracy_score(y_test, y_pred_RandomForest))
print(cm_DecisionTree)
print(accuracy_score(y_test, y_pred_DecisionTree))
print(cm_KNeighbors)
print(accuracy_score(y_test, y_pred_KNeighbors))
print(cm_KSVM)
print(accuracy_score(y_test, y_pred_KSVM))
print(cm_SVM)
print(accuracy_score(y_test, y_pred_SVM))
print(cm_NB)
print(accuracy_score(y_test, y_pred_NB))
print(cm_LR)
print(accuracy_score(y_test, y_pred_LR))